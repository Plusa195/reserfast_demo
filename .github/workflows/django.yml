name: 🍽️ ReserFast CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: [3.11, 3.12]
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: 📦 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: 📚 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 🔍 Run Django system checks
      run: |
        python manage.py check
    
    - name: 🗄️ Run migrations
      run: |
        python manage.py migrate
    
    - name: 🧪 Run tests
      run: |
        python manage.py test
    
    - name: 📊 Check code coverage (optional)
      run: |
        # pip install coverage
        # coverage run --source='.' manage.py test
        # coverage report
        echo "Code coverage check - implement when tests are added"

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: 📦 Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort
    
    - name: 🎨 Check code formatting with Black
      run: |
        black --check --diff .
      continue-on-error: true
    
    - name: 📏 Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: 🔤 Check import sorting with isort
      run: |
        isort --check-only --diff .
      continue-on-error: true

  security:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: 📚 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install safety bandit
    
    - name: 🔒 Check for security issues with bandit
      run: |
        bandit -r . -x tests/
      continue-on-error: true
    
    - name: 🛡️ Check for known security vulnerabilities
      run: |
        safety check
      continue-on-error: true

  deploy-staging:
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - name: 🚀 Deploy to staging
      run: |
        echo "🚧 Deployment to staging environment"
        echo "This would deploy to staging server"
        # Aquí irían los comandos de deploy real
    
  deploy-production:
    needs: [test, lint, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 🌟 Deploy to production
      run: |
        echo "🚀 Deployment to production environment"
        echo "This would deploy to production server"
        # Aquí irían los comandos de deploy real

  # Job adicional para notificaciones
  notify:
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 📢 Notify team
      run: |
        if [ "${{ needs.test.result }}" == "success" ] && [ "${{ needs.lint.result }}" == "success" ]; then
          echo "✅ All checks passed! Ready for review."
        else
          echo "❌ Some checks failed. Please review."
        fi
